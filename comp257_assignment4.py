# -*- coding: utf-8 -*-
"""COMP257_Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19TFxFJ1bt9YEHgBO2UX029wWQ6zlo2Zk
"""

from sklearn.datasets import fetch_olivetti_faces
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
import numpy as np

faces_data = fetch_olivetti_faces()
X = faces_data.data

pca = PCA(n_components=0.99)
X_pca = pca.fit_transform(X)

covariance_types = ['full', 'tied', 'diag', 'spherical']
lowest_bic = np.infty
best_covariance_type = None
n_components_range = range(1, 8)

for covariance_type in covariance_types:
    for n_components in n_components_range:
        gmm = GaussianMixture(n_components=n_components, covariance_type=covariance_type)
        gmm.fit(X_pca)
        bic = gmm.bic(X_pca)
        if bic < lowest_bic:
            lowest_bic = bic
            best_covariance_type = covariance_type

best_covariance_type

lowest_bic = np.infty
best_covariance_type = None
n_components_range = range(1, 8)

for covariance_type in covariance_types:
    for n_components in n_components_range:
        gmm = GaussianMixture(n_components=n_components, covariance_type=covariance_type)
        gmm.fit(X_pca)
        bic = gmm.bic(X_pca)
        if bic < lowest_bic:
            lowest_bic = bic
            best_covariance_type = covariance_type

print("Best Covariance Type:", best_covariance_type)

"""Q3"""

import matplotlib.pyplot as plt

n_components_range = range(1, 11)
bics = []
aics = []

for n_components in n_components_range:
    gmm = GaussianMixture(n_components=n_components, covariance_type=best_covariance_type)
    gmm.fit(X_pca)

    bics.append(gmm.bic(X_pca))
    aics.append(gmm.aic(X_pca))

best_n_components_bic = n_components_range[np.argmin(bics)]

best_n_components_aic = n_components_range[np.argmin(aics)]

print("Best number of components based on BIC:", best_n_components_bic)
print("Best number of components based on AIC:", best_n_components_aic)

"""Q4"""

plt.figure(figsize=(15, 5))

plt.subplot(121)
plt.plot(n_components_range, bics, label='BIC')
plt.xlabel('Number of components')
plt.ylabel('BIC')
plt.title('BIC for different number of components')
plt.legend()

plt.subplot(122)
plt.plot(n_components_range, aics, label='AIC')
plt.xlabel('Number of components')
plt.ylabel('AIC')
plt.title('AIC for different number of components')
plt.legend()

plt.show()

"""Q5"""

best_gmm = GaussianMixture(n_components=best_n_components_bic, covariance_type=best_covariance_type)
best_gmm.fit(X_pca)

hard_clusters = best_gmm.predict(X_pca)
print("Hard Clustering for the first few instances:", hard_clusters[:5])

"""Q6"""

soft_clusters = best_gmm.predict_proba(X_pca)
print("Soft Clustering for the first few instances:\n", soft_clusters[:5])

"""Q7

Generate new samples
"""

n_samples = 5
new_samples, _ = best_gmm.sample(n_samples)

new_faces = pca.inverse_transform(new_samples)

"""Visualize the New Faces:"""

fig, axes = plt.subplots(1, n_samples, figsize=(15, 3))
for i, ax in enumerate(axes):
    ax.imshow(new_faces[i].reshape(64, 64), cmap='gray')
    ax.axis('off')
plt.show()

"""Q8"""

from skimage import transform, exposure

new_faces_reshaped = new_faces.reshape(-1, 64, 64)

rotated = transform.rotate(new_faces_reshaped[0], angle=45)

flipped = np.fliplr(new_faces_reshaped[1])

darkened = exposure.rescale_intensity(new_faces_reshaped[2], out_range=(0, 1))
darkened = exposure.adjust_gamma(darkened, gamma=1.5)

fig, axes = plt.subplots(2, 3, figsize=(12, 8))
axes = axes.ravel()

for i in range(3):
    axes[i].imshow(new_faces_reshaped[i], cmap='gray')
    axes[i].set_title(f'Original {i+1}')
    axes[i].axis('off')

axes[3].imshow(rotated, cmap='gray')
axes[3].set_title('Rotated')
axes[3].axis('off')

axes[4].imshow(flipped, cmap='gray')
axes[4].set_title('Flipped')
axes[4].axis('off')

axes[5].imshow(darkened, cmap='gray')
axes[5].set_title('Darkened')
axes[5].axis('off')

plt.show()

rotated_flat = rotated.reshape(1, -1)
flipped_flat = flipped.reshape(1, -1)
darkened_flat = darkened.reshape(1, -1)

rotated_pca = pca.transform(rotated_flat)
flipped_pca = pca.transform(flipped_flat)
darkened_pca = pca.transform(darkened_flat)

rotated_score = best_gmm.score_samples(rotated_pca)
flipped_score = best_gmm.score_samples(flipped_pca)
darkened_score = best_gmm.score_samples(darkened_pca)

normal_scores = best_gmm.score_samples(X_pca[:3])

rotated_score, flipped_score, darkened_score, normal_scores